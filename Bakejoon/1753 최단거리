#include <iostream>
#include <vector>
#include <queue>

using namespace std;
#define INF 1e9
int V, N;
int start_num;
vector<pair<int, int>> graph[100001];

int d[100001];


void dijstra(int start) {
	priority_queue<pair<int, int>> pq;
	pq.push({ 0,start });
	d[start] = 0;

	while (!pq.empty()) {
		int dist = -pq.top().first;
		int node = pq.top().second;
		pq.pop();
		if (dist > d[node]) 
			continue;
		
		for (int i = 0; i < graph[node].size(); i++) {
			
			int cost = graph[node][i].second + dist;
			if (cost < d[graph[node][i].first]) {
				d[graph[node][i].first] = cost;
				pq.push(make_pair(-cost, graph[node][i].first ));
			}
		}
	}
}



int main() {
	cin >> V >> N;
	cin >> start_num;

	
	for (int i = 0; i < N; i++) {
		int start_node, end_node, distance;
		cin >> start_node >> end_node >> distance;
		graph[start_node].push_back({ end_node,distance });
	}
	
	for (int i = 1; i < V + 1; i++) {
		d[i] = INF;
	}
	dijstra(start_num);

	for (int i = 1; i <= V; i++) {
		if (d[i] == INF) {
			cout << "INF" << endl;
		}
		else {
			cout << d[i] << endl;
		}
	}
}
