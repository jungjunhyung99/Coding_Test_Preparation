// 1. dfs
function hasCycleDFS(graph) {
  const visited = new Set();

  function dfs(node, parent) {
    visited.add(node);

    for (let neighbor of graph[node] || []) {
      if (!visited.has(neighbor)) {
        if (dfs(neighbor, node)) return true;
      } else if (neighbor !== parent) {
        return true; // 부모가 아닌데 방문했다면 cycle 발생
      }
    }
    return false;
  }

  for (let node in graph) {
    if (!visited.has(node)) {
      if (dfs(node, -1)) return true;
    }
  }
  return false;
}

// ✅ 테스트
const graph1 = {
  0: [1, 2],
  1: [0, 2],
  2: [0, 1],
}; // 0 - 1 - 2 - (0으로 돌아옴) => Cycle 존재
console.log(hasCycleDFS(graph1)); // true

const graph2 = {
  0: [1],
  1: [0, 2],
  2: [1, 3],
  3: [2],
}; // 선형 그래프 (Cycle 없음)
console.log(hasCycleDFS(graph2)); // false


// 2. union find
class UnionFind {
  constructor(size) {
    this.parent = Array.from({ length: size }, (_, i) => i);
    this.rank = Array(size).fill(1);
  }

  find(node) {
    if (this.parent[node] !== node) {
      this.parent[node] = this.find(this.parent[node]); // 경로 압축
    }
    return this.parent[node];
  }

  union(node1, node2) {
    let root1 = this.find(node1);
    let root2 = this.find(node2);

    if (root1 === root2) return false; // 이미 같은 집합 -> cycle 발생

    if (this.rank[root1] > this.rank[root2]) {
      this.parent[root2] = root1;
    } else if (this.rank[root1] < this.rank[root2]) {
      this.parent[root1] = root2;
    } else {
      this.parent[root2] = root1;
      this.rank[root1]++;
    }
    return true;
  }
}

function hasCycleUnionFind(edges, n) {
  const uf = new UnionFind(n);

  for (let [u, v] of edges) {
    if (!uf.union(u, v)) return true; // Cycle detected
  }
  return false;
}

// 예제 그래프 (Undirected)
const edges1 = [
  [0, 1],
  [1, 2],
  [2, 0], // Cycle 발생
];
console.log(hasCycleUnionFind(edges1, 3)); // true

const edges2 = [
  [0, 1],
  [1, 2],
  [2, 3],
];
console.log(hasCycleUnionFind(edges2, 4)); // false
