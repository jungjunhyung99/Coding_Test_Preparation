#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <string.h>
using namespace std;

int dx[4] = {-1,0,1,0};
int dy[4] = { 0,1,0,-1 };
int cnt = 0;
int x, y, edge;
char arr[50][50] = { 0, };
bool visited[50][50] = { 0, };

void find_dfs(int M, int N) {

	for (int i = 0; i < 4; i++) {
		int nx = M + dx[i];
		int ny = N + dy[i];

		if (nx >= 0 && ny >= 0 && nx < x && ny < y) {
			if (visited[nx][ny] == false && arr[nx][ny] == '1') {
				visited[nx][ny] = true;
				find_dfs(nx, ny);
			}
		}
	}
}



int main() {
	int test_case;
	cin >> test_case;
	for (int k = 0; k < test_case; k++) {
		vector<int> order;
		memset(arr, 0, sizeof(arr));
		memset(visited, 0, sizeof(visited));
		
		cin >> x >> y >> edge;
		for (int j = 0; j < edge; j++) {
			int m, n;
			cin >> m >> n;
			arr[m][n] = '1';
		}
		
		for (int i = 0; i < x; i++) {
			for (int j = 0; j < y; j++) {
				if (visited[i][j] == false && arr[i][j] == '1') {
					cnt++;
					visited[i][j] = true;
					find_dfs(i,j);
					order.push_back(cnt);
					cnt = 0;
				}
			}
		}
		cout << order.size() << endl;
	}
	
	
}
