#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

vector<int> order;
vector<int> order2;

int find_dfs(int start, bool* visited, vector<int>* v) {
	visited[start] = true;
	order.push_back(start);
	
	for (int i = 0; i < v[start].size(); i++) {
		
		for (int i = 0; i < v[start].size(); i++) {
			sort(v[start].begin(), v[start].end());
		}
		if (!visited[v[start][i]]) {
			find_dfs(v[start][i], visited, v);
			
		}
	}
	return 0;
}

int find_bfs(int start, bool* visited, queue<int>* que, vector<int>* v) {
	visited[start] = true;
	order2.push_back(start);
	que->push(start);

	while (!que->empty()) {
		int x = que->front();
		for (int i = 0; i < v[x].size(); i++) {
			if (!visited[v[x][i]]) {
				visited[v[x][i]] = true;
				que->push(v[x][i]);
				order2.push_back(v[x][i]);
			}
		}
		que->pop();
	}
	return 0;
}

int main() {
	int node, edge, start;
	cin >> node >> edge >> start;
	vector<int>*v = new vector<int>[node + 1];
	bool* visited = new bool[node + 1];
	bool* visited2 = new bool[node + 1];
	queue<int> que;
	for (int i = 0; i < node + 1; i++) {
		visited[i] = false;
		visited2[i] = false;
	}

	for (int i = 0; i < edge; i++) {
		int start, temp_edge;
		cin >> start >> temp_edge;
		v[start].push_back(temp_edge);
		v[temp_edge].push_back(start);
	}

	find_dfs(start, visited, v);

	for (int i = 0; i < order.size(); i++) {
		cout << order[i] << " ";
	}
	cout << endl;
	find_bfs(start, visited2, &que,v);
	for (int i = 0; i < order2.size(); i++) {
		cout << order2[i] << " ";
	}
	cout << endl;

	return 0;
}

// 자바스크립트 version

// const fs = require("fs");
// const filePath = process.platform === "linux" ? "/dev/stdin" : "input.txt";
// let input = fs.readFileSync(filePath).toString().trim().split("\n");

// const [N,M,V] = input[0].split(" ").map((item) => +item);
// let graph = new Array(N + 1);

// for(let i = 0; i < graph.length; i++){
//     graph[i] = [];
// }

// for(let i = 0 ; i < M; i++){
//     let [from, to] = input[i + 1].split(" ").map((item) => +item);
//     graph[from].push(to);
//     graph[to].push(from);
// }

// graph.forEach((element) => {
//     element.sort((a,b) => a - b);
// });

// let visited = new Array(N + 1).fill(0);
// let answer_dfs = [];

// function dfs(V) {
//     if(visited[V]){
//         return;
//     }
//     answer_dfs.push(V);
//     visited[V] = 1;
//     for(let i = 0; i < graph[V].length; i++){
//         let next = graph[V][i];
//         if(visited[next] !== 1){
//             dfs(next);
//         }
//     }
// }

// dfs(V);
// console.log(answer_dfs.join(" "));

// let answer_bfs = [];
// visited.fill(0);
// function BFS(V) {
//   let queue = [V];
//   while (queue.length) {
//     let x = queue.shift();
//     if (visited[x] === 1) {
//       continue;
//     }
//     visited[x] = 1;
//     answer_bfs.push(x);
//     for (let i = 0; i < graph[x].length; i++) {
//       let next = graph[x][i];
//       if (visited[next] === 0) {
//         queue.push(next);
//       }
//     }
//   }
// }
// BFS(V);
// console.log(answer_bfs.join(" "));
