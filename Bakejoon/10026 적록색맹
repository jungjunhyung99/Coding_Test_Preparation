#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <string.h>
using namespace std;

int dx[4] = {-1,0,1,0};
int dy[4] = { 0,1,0,-1 };

int N;
char arr[100][100];
bool visited[100][100];
int cnt = 0;
int cnt2 = 0;

void find_dfs(int x, int y, char current, int start) {
	if (start == 0) {
		
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx >= 0 && ny >= 0 && nx < N && ny < N) {
				if (!visited[nx][ny] && arr[nx][ny] == current) {
					visited[nx][ny] = true;
					find_dfs(nx, ny, current, 0);
				}
			}
			
		}
	}
	else if (start == 1) {
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx >= 0 && ny >= 0 && nx < N && ny < N) {
				if (!visited[nx][ny] && current != 'B' && arr[nx][ny] != 'B') {
					visited[nx][ny] = true;
					find_dfs(nx, ny, arr[nx][ny], 1);
				}
				else if (!visited[nx][ny] && current == 'B' && arr[nx][ny] == 'B') {
					visited[nx][ny] = true;
					find_dfs(nx, ny, 'B', 1);
				}
			}
		}
	}
	
}



int main() {
	cin >> N;
	memset(arr, false, sizeof(visited));

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> arr[i][j];
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (visited[i][j] == false) {
				cnt++;
				visited[i][j] = true;
				find_dfs(i, j, arr[i][j],0);
			}
		}
	}
	memset(visited, false, sizeof(visited));

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (visited[i][j] == false) {
				cnt2++;
				visited[i][j] = true;
				find_dfs(i, j, arr[i][j], 1);
			}
		}
	}

	cout << cnt << " " << cnt2 << endl;

	return 0;
}
