const fs = require("fs");
const filePath = process.platform === "linux" ? "/dev/stdin" : "input.txt";
let input = fs.readFileSync(filePath).toString().trim().split("\n");

class MinHeap {
  constructor() {
    this.heap = [];
  }

  getLength = () => {
    return this.heap.length;
  };

  push = (node) => {
    this.heap.push(node);
    let index = this.heap.length - 1;
    let parentIndex = Math.floor((index - 1) / 2);
    while (index > 0 && this.heap[parentIndex] > this.heap[index]) {
      const temp = this.heap[parentIndex];
      this.heap[parentIndex] = this.heap[index];
      this.heap[index] = temp;
      index = parentIndex;
      parentIndex = Math.floor((index - 1) / 2);
    }
  };

  pop = () => {
    if (this.heap.length === 1) return this.heap.pop();

    const result = this.heap[0];
    this.heap[0] = this.heap.pop();
    let index = 0;

    while (1) {
      const leftIndex = index * 2 + 1;
      const rightIndex = index * 2 + 2;

      if (leftIndex >= this.heap.length) {
        break;
      }
      let nextIndex = index;

      if (this.heap[nextIndex] > this.heap[leftIndex]) {
        nextIndex = leftIndex;
      }
      if (
        rightIndex < this.heap.length &&
        this.heap[nextIndex] > this.heap[rightIndex]
      ) {
        nextIndex = rightIndex;
      }
      if (nextIndex === index) {
        break;
      }

      const temp = this.heap[nextIndex];
      this.heap[nextIndex] = this.heap[index];
      this.heap[index] = temp;
      index = nextIndex;
    }
    return result;
  };
}

const [N, M] = input.shift().split(" ").map(Number);

const degree = Array.from(new Array(N + 1), () => []);
const inDegree = new Array(N + 1).fill(0);

for (let i = 0; i < input.length; i++) {
  const [first, second] = input[i].split(" ").map(Number);

  inDegree[second]++;
  degree[first].push(second);
}

const arr = new MinHeap();
const result = [];

for (let i = 1; i < inDegree.length; i++) {
  if (inDegree[i] === 0) {
    arr.push(i);
  }
}

while (arr.getLength()) {
  const currentNum = arr.pop();
  result.push(currentNum);

  for (let i = 0; i < degree[currentNum]?.length; i++) {
    const nextNum = degree[currentNum][i];
    inDegree[nextNum]--;
    if (inDegree[nextNum] === 0) {
      arr.push(nextNum);
    }
  }
}

console.log(result.join(" "));
